basePath: /api
definitions:
  handlers.AdminUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_login:
        type: string
      role:
        $ref: "#/definitions/models.AdminRole"
    type: object
  handlers.CreateOrderRequest:
    properties:
      guest_email:
        type: string
      items:
        items:
          $ref: "#/definitions/models.CartItem"
        minItems: 1
        type: array
      shipping_address:
        $ref: "#/definitions/models.Address"
    required:
      - guest_email
      - items
      - shipping_address
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  handlers.LoginResponse:
    properties:
      admin:
        $ref: "#/definitions/handlers.AdminUserResponse"
      message:
        type: string
      success:
        type: boolean
      token:
        type: string
    type: object
  handlers.OrderResponse:
    properties:
      message:
        type: string
      order:
        $ref: "#/definitions/models.Order"
    type: object
  models.Address:
    properties:
      address1:
        example: 123 Main St
        type: string
      address2:
        example: Apt 4B
        type: string
      city:
        example: Ho Chi Minh City
        type: string
      country:
        example: Vietnam
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      state:
        example: HCMC
        type: string
      zip_code:
        example: "70000"
        type: string
    type: object
  models.AdminRole:
    enum:
      - super_admin
      - inventory
      - order_manager
      - viewer
    type: string
    x-enum-varnames:
      - RoleSuperAdmin
      - RoleInventory
      - RoleOrderManager
      - RoleViewer
  models.CartItem:
    properties:
      price:
        example: 120
        type: number
      product_id:
        example: 1
        type: integer
      quantity:
        example: 1
        type: integer
      size:
        example: A2
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      guest_email:
        example: customer@example.com
        type: string
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: "#/definitions/models.OrderItem"
        type: array
      order_number:
        example: BJJ-1753519000
        type: string
      shipping_address:
        $ref: "#/definitions/models.Address"
      status:
        allOf:
          - $ref: "#/definitions/models.OrderStatus"
        example: pending
      stripe_payment_id:
        example: pi_1234567890
        type: string
      total_amount:
        example: 120
        type: number
      updated_at:
        type: string
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      order_id:
        example: 1
        type: integer
      price:
        example: 120
        type: number
      product:
        $ref: "#/definitions/models.Product"
      product_id:
        example: 1
        type: integer
      quantity:
        example: 1
        type: integer
      size:
        example: A2
        type: string
    type: object
  models.OrderStatus:
    enum:
      - pending
      - paid
      - shipped
      - delivered
      - cancelled
    type: string
    x-enum-varnames:
      - OrderStatusPending
      - OrderStatusPaid
      - OrderStatusShipped
      - OrderStatusDelivered
      - OrderStatusCancelled
  models.Product:
    properties:
      category:
        example: gi
        type: string
      created_at:
        type: string
      description:
        example: Premium BJJ gi with excellent fit and durability
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: https://example.com/gi.jpg
        type: string
      name:
        example: Tatami Estilo 6.0 Gi
        type: string
      price:
        example: 120
        type: number
      size_options:
        description: Changed to simple string
        example: A1,A2,A3,A4
        type: string
      stock:
        example: 15
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: admin@bjjstore.com
    name: Calvin Le
    url: http://www.bjjstore.com/support
  description: A complete e-commerce API for Brazilian Jiu-Jitsu gear and equipment
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: BJJ Store API
  version: "1.0"
paths:
  /admin/auth/login:
    post:
      consumes:
        - application/json
      description: Authenticate admin user and get JWT token
      parameters:
        - description: Admin login credentials
          in: body
          name: credentials
          required: true
          schema:
            $ref: "#/definitions/handlers.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handlers.LoginResponse"
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Admin login
      tags:
        - admin
        - auth
  /admin/logout:
    post:
      consumes:
        - application/json
      description: Logout admin user and revoke JWT token
      produces:
        - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: No authorization header
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Admin logout
      tags:
        - admin
        - auth
  /admin/orders:
    get:
      consumes:
        - application/json
      description: Get all orders with pagination
      parameters:
        - default: 1
          description: Page number
          in: query
          name: page
          type: integer
        - default: 20
          description: Items per page
          in: query
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Orders list with pagination
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Get all orders (Admin only)
      tags:
        - admin
        - orders
  /admin/orders/{id}/status:
    put:
      consumes:
        - application/json
      description: Update the status of an order
      parameters:
        - description: Order ID
          in: path
          name: id
          required: true
          type: integer
        - description: New status
          in: body
          name: status
          required: true
          schema:
            additionalProperties:
              type: string
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Update order status (Admin only)
      tags:
        - admin
        - orders
  /admin/products:
    post:
      consumes:
        - application/json
      description: Create a new product (Admin only)
      parameters:
        - description: Product data
          in: body
          name: product
          required: true
          schema:
            $ref: "#/definitions/models.Product"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/models.Product"
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Create a new product
      tags:
        - admin
        - products
  /admin/products/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a product by ID (Admin only)
      parameters:
        - description: Product ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Delete a product
      tags:
        - admin
        - products
    put:
      consumes:
        - application/json
      description: Update an existing product (Admin only)
      parameters:
        - description: Product ID
          in: path
          name: id
          required: true
          type: integer
        - description: Updated product data
          in: body
          name: product
          required: true
          schema:
            $ref: "#/definitions/models.Product"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Product"
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Update a product
      tags:
        - admin
        - products
  /admin/profile:
    get:
      consumes:
        - application/json
      description: Get current admin user profile
      produces:
        - application/json
      responses:
        "200":
          description: Admin profile
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Admin not found
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Get admin profile
      tags:
        - admin
        - auth
  /admin/stats:
    get:
      consumes:
        - application/json
      description: Get overview statistics for admin dashboard
      produces:
        - application/json
      responses:
        "200":
          description: Dashboard statistics
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
        - BearerAuth: []
      summary: Get admin dashboard statistics
      tags:
        - admin
        - dashboard
  /orders:
    post:
      consumes:
        - application/json
      description: Create a new order with guest checkout
      parameters:
        - description: Order data
          in: body
          name: order
          required: true
          schema:
            $ref: "#/definitions/handlers.CreateOrderRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/handlers.OrderResponse"
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new order
      tags:
        - orders
  /orders/email/{email}:
    get:
      consumes:
        - application/json
      description: Get all orders for a specific email address
      parameters:
        - description: Customer Email
          in: path
          name: email
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Orders list
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get orders by email
      tags:
        - orders
  /orders/track/{orderNumber}:
    get:
      consumes:
        - application/json
      description: Track an order by order number
      parameters:
        - description: Order Number
          in: path
          name: orderNumber
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Order details
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      summary: Track an order
      tags:
        - orders
  /products:
    get:
      consumes:
        - application/json
      description: Get a list of all products with optional filtering
      parameters:
        - description: Filter by category
          in: query
          name: category
          type: string
        - description: Search in product name and description
          in: query
          name: search
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/models.Product"
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all products
      tags:
        - products
  /products/{id}:
    get:
      consumes:
        - application/json
      description: Get a single product by its ID
      parameters:
        - description: Product ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Product"
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a product by ID
      tags:
        - products
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
